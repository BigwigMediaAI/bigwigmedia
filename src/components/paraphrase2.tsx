/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/M4A3oividNb
 */
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { BASE_URL } from "@/utils/funcitons";
import { useAuth } from "@clerk/clerk-react";
import axios from "axios";
import { Loader2 } from "lucide-react";
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { Element } from "./Generate2";

export function Script
  ({ groups,val,setVal,output,handleSubmit,isLoading }: {
    groups: any, val: any;
    setVal: Function;
    output:any;
    handleSubmit:Function;
    isLoading:boolean;
}) {
  const [text, setText] = useState("");
  // const [isLoading, setIsLoading] = useState(false);
  // const [output, setOutput] = useState("");

  const navigate = useNavigate();

  console.log(groups)

  const handlePaste = async () => {
    const text = await navigator.clipboard.readText();
    setText(text);
  };
  const { getToken, isLoaded, isSignedIn, userId } = useAuth();

  // const handleSubmit = async (
  //   e: React.MouseEvent<HTMLButtonElement, MouseEvent>
  // ) => {
  //   //@ts-ignore
  //   setIsLoading(true);
  //   e.preventDefault();
  //   if (!isSignedIn) {
  //     navigate("/login");
  //     toast.error("Please Signin to continue");
  //     return;
  //   }
  //   if (!text) {
  //     toast.error("Please enter the text to generate");
  //     setIsLoading(false);
  //     return;
  //   }
  //   try {
  //     const res = await axios.post(
  //       `${BASE_URL}/response/paraphrase?clerkId=${userId}`,
  //       {
  //         prompt: text,
  //       }
  //     );

  //     if (res.status === 200) {
  //       setOutput(res.data.data);
  //       setIsLoading(false);
  //     } else {
  //       toast.error(res.data.error);
  //       setIsLoading(false);
  //     }
  //   } catch (error: any) {
  //     // toast.error(error);
  //     toast.error(error.response.data.error);
  //     setIsLoading(false);
  //   }
  // };

  const handleCopy = () => {
    try {
      navigator.clipboard.writeText(output);
      toast.success("Copied to Clipboard");
    } catch (error) {
      toast.error("Failed to copy");
    }
  };
  return (
    <div className="m-auto w-full max-w-4xl rounded-lg dark:bg-zinc-900 bg-white p-6 shadow-lg">
      <div className="flex flex-col md:flex-row">
        <div className="w-full  pr-2">
          <div className="flex justify-center px-5 max-w-[1084px] w-full mx-auto items-center flex-col gap-8">
            {groups.map((grp: any, index: number) => (
              <div
                key={grp._id}
                className="w-full flex flex-col md:flex-row  max-w-[844px] justify-center gap-8 items-center"
              >
                {grp.map((ele: any, i: number) => (
                  <Element key={i} element={ele} val={val} setVal={setVal} />
                ))}
              </div>
            ))}
          </div>
          <div className="flex w-full my-4 items-center justify-center">
            {/* <Button
              className="rounded-md px-4 py-2 text-gray-600 dark:text-gray-200 hover:bg-gray-100 hover:dark:bg-gray-800"
              variant="ghost"
              onClick={handlePaste}
            >
              <ClipboardCopyIcon className="mr-2 h-5 w-5" />
              Paste Text
            </Button> */}

            <Button
              className="rounded-md bt-gradient bg-green-500 px-6 py-2 text-white hover:bg-green-600"
              onClick={(e) => void handleSubmit(e)}
            >
              {isLoading && <Loader2 className="animate-spin w-7 h-7 " />}
              Generate
            </Button>
          </div>
        </div>
        <div className="w-full  pl-2 flex flex-col gap-2 justify-between">
          {isLoading ? (
            <div className="w-full h-full flex items-center justify-center">
              <Loader2 className="animate-spin w-20 h-20 mt-20" />
            </div>
          ) : (
            <div className="h-96 w-full rounded-md border-2 border-gray-300 dark:text-gray-200 text-gray-800 p-5  overflow-y-scroll">
                <p
                  className="p-5 text-base md:text-xl font-medium"
                  dangerouslySetInnerHTML={{ __html: output?.output as string }}
                />
            </div>
          )}
          {!!output?.output && (
            <Button
              className="rounded-md self-end mb-6 px-4 py-0 text-gray-600 hover:dark:bg-gray-800 disabled:opacity-90 opacity-100 flex gap-2 dark:text-gray-200 hover:bg-gray-100"
              variant="ghost"
              onClick={handleCopy}
              disabled={isLoading}
            >
              <CopyIcon className="mr-2 h-5 w-5" />
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}

function CopyIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="14" height="14" x="8" y="8" rx="2" ry="2" />
      <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2" />
    </svg>
  );
}

function ClipboardCopyIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="8" height="4" x="8" y="2" rx="1" ry="1" />
      <path d="M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2" />
      <path d="M16 4h2a2 2 0 0 1 2 2v4" />
      <path d="M21 14H11" />
      <path d="m15 10-4 4 4 4" />
    </svg>
  );
}
